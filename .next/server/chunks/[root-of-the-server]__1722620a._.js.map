{"version":3,"sources":["turbopack:///[project]/src/lib/prisma.ts","turbopack:///[project]/src/lib/storage/vercel-blob.ts","turbopack:///[project]/src/lib/storage/deduplication.ts","turbopack:///[project]/src/lib/storage/upload-service.ts","turbopack:///[project]/src/app/api/upload/route.ts","turbopack:///[project]/node_modules/next/dist/esm/build/templates/app-route.js"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: ['query'],\n  })\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma","// Complete Vercel Blob Storage System for Production\n// Replaces S3/MinIO with Vercel Blob for deployment optimization\n\nimport { put, del, list, head } from '@vercel/blob'\nimport { createHash } from 'crypto'\n\nexport interface UploadFileParams {\n  key: string\n  buffer: Buffer\n  contentType: string\n  metadata?: Record<string, string>\n}\n\nexport interface FileMetadata {\n  key: string\n  size: number\n  lastModified: Date\n  contentType: string\n  url: string\n  sha256?: string\n}\n\nclass VercelBlobStorage {\n  /**\n   * Upload a file to Vercel Blob with full validation and security\n   */\n  async uploadFile({ key, buffer, contentType, metadata = {} }: UploadFileParams): Promise<string> {\n    try {\n      // Generate SHA256 hash for integrity\n      const sha256 = createHash('sha256').update(buffer).digest('hex')\n\n      // Upload to Vercel Blob\n      const blob = await put(key, buffer, {\n        access: 'public',\n        contentType,\n        addRandomSuffix: false,\n        cacheControlMaxAge: 60 * 60 * 24 * 30, // 30 days\n      })\n\n      console.log(`File uploaded successfully: ${key}`)\n      return blob.url\n    } catch (error) {\n      console.error('Error uploading file to Vercel Blob:', error)\n      throw new Error(`Failed to upload file: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n\n  /**\n   * Upload file from buffer with automatic key generation\n   */\n  async uploadBuffer(buffer: Buffer, contentType: string, prefix: string = 'uploads'): Promise<string> {\n    try {\n      const sha256 = createHash('sha256').update(buffer).digest('hex')\n      const extension = this.getExtensionFromMime(contentType)\n      const key = `${prefix}/${sha256}${extension}`\n\n      const blob = await put(key, buffer, {\n        access: 'public',\n        contentType,\n        addRandomSuffix: false,\n      })\n\n      return blob.url\n    } catch (error) {\n      console.error('Error uploading buffer to Vercel Blob:', error)\n      throw new Error(`Failed to upload buffer: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n\n  /**\n   * Get a public URL for a file (Vercel Blob URLs are already public)\n   */\n  async getFileUrl(key: string, expiresIn: number = 3600): Promise<string> {\n    try {\n      // For Vercel Blob, we need to reconstruct the URL or use the stored URL\n      // Since Vercel Blob URLs are public, we return them directly\n      const blobs = await list({ prefix: key, limit: 1 })\n\n      if (blobs.blobs.length === 0) {\n        throw new Error(`File not found: ${key}`)\n      }\n\n      return blobs.blobs[0].url\n    } catch (error) {\n      console.error('Error getting file URL from Vercel Blob:', error)\n      throw new Error(`Failed to get file URL: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n\n  /**\n   * Delete a file from Vercel Blob\n   */\n  async deleteFile(key: string): Promise<void> {\n    try {\n      // Find the blob by key/prefix\n      const blobs = await list({ prefix: key, limit: 1 })\n\n      if (blobs.blobs.length === 0) {\n        console.warn(`File not found for deletion: ${key}`)\n        return\n      }\n\n      await del(blobs.blobs[0].url)\n      console.log(`File deleted successfully: ${key}`)\n    } catch (error) {\n      console.error('Error deleting file from Vercel Blob:', error)\n      throw new Error(`Failed to delete file: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n\n  /**\n   * Download file content as buffer\n   */\n  async downloadFile(key: string): Promise<Buffer> {\n    try {\n      // Get the blob URL first\n      const blobs = await list({ prefix: key, limit: 1 })\n\n      if (blobs.blobs.length === 0) {\n        throw new Error(`File not found: ${key}`)\n      }\n\n      // Fetch the blob content\n      const response = await fetch(blobs.blobs[0].url)\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n      }\n\n      const arrayBuffer = await response.arrayBuffer()\n      return Buffer.from(arrayBuffer)\n    } catch (error) {\n      console.error('Error downloading file from Vercel Blob:', error)\n      throw new Error(`Failed to download file: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n\n  /**\n   * Check if file exists\n   */\n  async fileExists(key: string): Promise<boolean> {\n    try {\n      const blobs = await list({ prefix: key, limit: 1 })\n      return blobs.blobs.length > 0\n    } catch (error) {\n      console.error('Error checking file existence in Vercel Blob:', error)\n      return false\n    }\n  }\n\n  /**\n   * List files with prefix\n   */\n  async listFiles(prefix: string = '', limit: number = 100): Promise<FileMetadata[]> {\n    try {\n      const result = await list({ prefix, limit })\n\n      return result.blobs.map(blob => ({\n        key: this.extractKeyFromUrl(blob.url),\n        size: blob.size,\n        lastModified: new Date(blob.uploadedAt),\n        contentType: blob.contentType || 'application/octet-stream',\n        url: blob.url,\n      }))\n    } catch (error) {\n      console.error('Error listing files from Vercel Blob:', error)\n      throw new Error(`Failed to list files: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n\n  /**\n   * Get file metadata\n   */\n  async getFileMetadata(key: string): Promise<FileMetadata | null> {\n    try {\n      const blobs = await list({ prefix: key, limit: 1 })\n\n      if (blobs.blobs.length === 0) {\n        return null\n      }\n\n      const blob = blobs.blobs[0]\n      return {\n        key: this.extractKeyFromUrl(blob.url),\n        size: blob.size,\n        lastModified: new Date(blob.uploadedAt),\n        contentType: blob.contentType || 'application/octet-stream',\n        url: blob.url,\n      }\n    } catch (error) {\n      console.error('Error getting file metadata from Vercel Blob:', error)\n      return null\n    }\n  }\n\n  /**\n   * Helper method to get file extension from MIME type\n   */\n  private getExtensionFromMime(mimeType: string): string {\n    const mimeMap: Record<string, string> = {\n      'application/pdf': '.pdf',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',\n      'application/msword': '.doc',\n      'text/plain': '.txt',\n      'image/jpeg': '.jpg',\n      'image/png': '.png',\n      'image/gif': '.gif',\n      'application/json': '.json',\n      'text/csv': '.csv',\n    }\n\n    return mimeMap[mimeType] || ''\n  }\n\n  /**\n   * Helper method to extract key from Vercel Blob URL\n   */\n  private extractKeyFromUrl(url: string): string {\n    try {\n      const urlObj = new URL(url)\n      return urlObj.pathname.substring(1) // Remove leading slash\n    } catch {\n      return url\n    }\n  }\n}\n\n// Export singleton instance\nexport const storageService = new VercelBlobStorage()\n\n// Export types for backward compatibility\n// Export types with aliases to avoid conflicts\nexport type { UploadFileParams as VBUploadFileParams, FileMetadata as VBFileMetadata }","import { prisma } from '@/lib/prisma'\nimport crypto from 'crypto'\n\nexport interface FileInfo {\n  buffer: Buffer\n  filename: string\n  contentType: string\n}\n\nexport interface DeduplicationResult {\n  isDuplicate: boolean\n  existingDocument?: {\n    id: string\n    filename: string\n    version: number\n    tenderId: string\n  }\n  sha256: string\n}\n\nexport class FileDeduplicationService {\n  static calculateSHA256(buffer: Buffer): string {\n    return crypto.createHash('sha256').update(buffer).digest('hex')\n  }\n\n  static async checkForDuplicate(fileInfo: FileInfo): Promise<DeduplicationResult> {\n    const sha256 = this.calculateSHA256(fileInfo.buffer)\n\n    // Check if a document with this hash already exists\n    const existingDocument = await prisma.document.findUnique({\n      where: { sha256 },\n      select: {\n        id: true,\n        filename: true,\n        version: true,\n        tenderId: true,\n      },\n    })\n\n    return {\n      isDuplicate: !!existingDocument,\n      existingDocument: existingDocument || undefined,\n      sha256,\n    }\n  }\n\n  static async getNextVersion(tenderId: string, filename: string): Promise<number> {\n    // Find the highest version number for files with the same name in this tender\n    const latestDocument = await prisma.document.findFirst({\n      where: {\n        tenderId,\n        filename: {\n          startsWith: filename.split('.')[0], // Match base filename without extension\n        },\n      },\n      orderBy: { version: 'desc' },\n      select: { version: true },\n    })\n\n    return (latestDocument?.version || 0) + 1\n  }\n\n  static async handleFileVersioning(\n    tenderId: string,\n    fileInfo: FileInfo\n  ): Promise<{\n    shouldUpload: boolean\n    version: number\n    existingDocumentId?: string\n  }> {\n    const deduplicationResult = await this.checkForDuplicate(fileInfo)\n\n    if (deduplicationResult.isDuplicate && deduplicationResult.existingDocument) {\n      // File already exists - check if it's in the same tender\n      if (deduplicationResult.existingDocument.tenderId === tenderId) {\n        // Same file in same tender - no need to upload again\n        return {\n          shouldUpload: false,\n          version: deduplicationResult.existingDocument.version,\n          existingDocumentId: deduplicationResult.existingDocument.id,\n        }\n      } else {\n        // Same file but different tender - create new version reference\n        const nextVersion = await this.getNextVersion(tenderId, fileInfo.filename)\n        return {\n          shouldUpload: false, // File content already exists in storage\n          version: nextVersion,\n        }\n      }\n    }\n\n    // New file - upload needed\n    const nextVersion = await this.getNextVersion(tenderId, fileInfo.filename)\n    return {\n      shouldUpload: true,\n      version: nextVersion,\n    }\n  }\n\n  static async createDocumentRecord(params: {\n    tenderId: string\n    filename: string\n    mime: string\n    sha256: string\n    pages?: number\n    version: number\n    storageKey?: string\n    url?: string\n  }) {\n    return await prisma.document.create({\n      data: {\n        tenderId: params.tenderId,\n        filename: params.filename,\n        mime: params.mime,\n        sha256: params.sha256,\n        pages: params.pages,\n        version: params.version,\n        url: params.url,\n      },\n    })\n  }\n}\n\nexport const deduplicationService = FileDeduplicationService","import { storageService, UploadFileParams } from './vercel-blob'\nimport { deduplicationService, FileInfo } from './deduplication'\nimport { prisma } from '@/lib/prisma'\n\nexport interface UploadServiceResult {\n  documentId: string\n  filename: string\n  version: number\n  isDuplicate: boolean\n  sha256: string\n  url: string\n}\n\nexport class UploadService {\n  static async uploadTenderDocument(\n    tenderId: string,\n    fileInfo: FileInfo\n  ): Promise<UploadServiceResult> {\n    try {\n      // Check for deduplication and versioning\n      const versioningResult = await deduplicationService.handleFileVersioning(\n        tenderId,\n        fileInfo\n      )\n\n      let storageKey: string\n      let url: string\n      let sha256 = deduplicationService.calculateSHA256(fileInfo.buffer)\n\n      if (versioningResult.shouldUpload) {\n        // Upload new file to storage\n        const key = `tenders/${tenderId}/${fileInfo.filename}`\n        url = await storageService.uploadFile({\n          key,\n          buffer: fileInfo.buffer,\n          contentType: fileInfo.contentType,\n        })\n\n        storageKey = key\n      } else {\n        // File already exists in storage, just generate URL\n        if (versioningResult.existingDocumentId) {\n          // Get existing document details\n          const existingDoc = await prisma.document.findUnique({\n            where: { id: versioningResult.existingDocumentId },\n          })\n\n          if (existingDoc?.url) {\n            url = existingDoc.url\n          } else {\n            // Generate URL from storage key if needed\n            storageKey = `tenders/${tenderId}/${fileInfo.filename}`\n            url = await storageService.getFileUrl(storageKey)\n          }\n        } else {\n          // Create storage key and URL for new document reference\n          storageKey = `tenders/${tenderId}/${fileInfo.filename}`\n          url = await storageService.getFileUrl(storageKey)\n        }\n      }\n\n      // Create document record in database\n      const document = await deduplicationService.createDocumentRecord({\n        tenderId,\n        filename: fileInfo.filename,\n        mime: fileInfo.contentType,\n        sha256,\n        version: versioningResult.version,\n        url,\n      })\n\n      // Log the upload event\n      await this.logUploadEvent(tenderId, document.id, fileInfo.filename)\n\n      return {\n        documentId: document.id,\n        filename: fileInfo.filename,\n        version: versioningResult.version,\n        isDuplicate: !versioningResult.shouldUpload,\n        sha256,\n        url,\n      }\n    } catch (error) {\n      console.error('Error in upload service:', error)\n      throw new Error('Failed to process file upload')\n    }\n  }\n\n  static async downloadDocument(documentId: string): Promise<Buffer> {\n    try {\n      const document = await prisma.document.findUnique({\n        where: { id: documentId },\n      })\n\n      if (!document) {\n        throw new Error('Document not found')\n      }\n\n      // Generate storage key from document info\n      const storageKey = `tenders/${document.tenderId}/${document.filename}`\n\n      return await storageService.downloadFile(storageKey)\n    } catch (error) {\n      console.error('Error downloading document:', error)\n      throw new Error('Failed to download document')\n    }\n  }\n\n  static async deleteDocument(documentId: string): Promise<void> {\n    try {\n      const document = await prisma.document.findUnique({\n        where: { id: documentId },\n      })\n\n      if (!document) {\n        throw new Error('Document not found')\n      }\n\n      // Check if this is the only reference to the file\n      const referenceCount = await prisma.document.count({\n        where: { sha256: document.sha256 },\n      })\n\n      // Delete from storage only if this is the last reference\n      if (referenceCount === 1) {\n        const storageKey = `tenders/${document.tenderId}/${document.filename}`\n        await storageService.deleteFile(storageKey)\n      }\n\n      // Delete document record\n      await prisma.document.delete({\n        where: { id: documentId },\n      })\n\n      // Log the deletion event\n      await this.logDeletionEvent(document.tenderId, documentId, document.filename)\n    } catch (error) {\n      console.error('Error deleting document:', error)\n      throw new Error('Failed to delete document')\n    }\n  }\n\n  private static async logUploadEvent(\n    tenderId: string,\n    documentId: string,\n    filename: string\n  ): Promise<void> {\n    try {\n      await prisma.auditLog.create({\n        data: {\n          actorId: 'system', // TODO: Get from session\n          action: 'UPLOAD_DOCUMENT',\n          entity: 'Document',\n          entityId: documentId,\n          diff: {\n            filename,\n            tenderId,\n            action: 'uploaded',\n          },\n        },\n      })\n    } catch (error) {\n      console.error('Error logging upload event:', error)\n      // Don't throw here, as the main operation succeeded\n    }\n  }\n\n  private static async logDeletionEvent(\n    tenderId: string,\n    documentId: string,\n    filename: string\n  ): Promise<void> {\n    try {\n      await prisma.auditLog.create({\n        data: {\n          actorId: 'system', // TODO: Get from session\n          action: 'DELETE_DOCUMENT',\n          entity: 'Document',\n          entityId: documentId,\n          diff: {\n            filename,\n            tenderId,\n            action: 'deleted',\n          },\n        },\n      })\n    } catch (error) {\n      console.error('Error logging deletion event:', error)\n      // Don't throw here\n    }\n  }\n}\n\nexport const uploadService = UploadService","import { NextRequest, NextResponse } from 'next/server'\nimport { getServerSession } from 'next-auth'\nimport { authOptions } from '@/lib/auth'\nimport { uploadService } from '@/lib/storage/upload-service'\nimport { prisma } from '@/lib/prisma'\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Check authentication\n    const session = await getServerSession(authOptions)\n    if (!session?.user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    // Parse form data\n    const formData = await request.formData()\n    const file = formData.get('file') as File\n    const tenderId = formData.get('tenderId') as string\n\n    if (!file) {\n      return NextResponse.json({ error: 'No file provided' }, { status: 400 })\n    }\n\n    if (!tenderId) {\n      return NextResponse.json({ error: 'Tender ID is required' }, { status: 400 })\n    }\n\n    // Validate file type\n    const allowedTypes = [\n      'application/pdf',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'application/msword',\n    ]\n\n    if (!allowedTypes.includes(file.type)) {\n      return NextResponse.json(\n        { error: 'Only PDF and DOCX files are allowed' },\n        { status: 400 }\n      )\n    }\n\n    // Validate file size (max 50MB)\n    const maxSize = 50 * 1024 * 1024 // 50MB\n    if (file.size > maxSize) {\n      return NextResponse.json(\n        { error: 'File size must be less than 50MB' },\n        { status: 400 }\n      )\n    }\n\n    // Convert file to buffer\n    const arrayBuffer = await file.arrayBuffer()\n    const buffer = Buffer.from(arrayBuffer)\n\n    // Upload file\n    const result = await uploadService.uploadTenderDocument(tenderId, {\n      buffer,\n      filename: file.name,\n      contentType: file.type,\n    })\n\n    return NextResponse.json({\n      success: true,\n      data: result,\n    })\n  } catch (error) {\n    console.error('Upload error:', error)\n    return NextResponse.json(\n      { error: 'Failed to upload file' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Check authentication\n    const session = await getServerSession(authOptions)\n    if (!session?.user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const { searchParams } = new URL(request.url)\n    const documentId = searchParams.get('documentId')\n\n    if (!documentId) {\n      return NextResponse.json({ error: 'Document ID is required' }, { status: 400 })\n    }\n\n    // Download file\n    const buffer = await uploadService.downloadDocument(documentId)\n\n    // Get document info for proper headers\n    const document = await prisma.document.findUnique({\n      where: { id: documentId },\n    })\n\n    if (!document) {\n      return NextResponse.json({ error: 'Document not found' }, { status: 404 })\n    }\n\n    return new NextResponse(buffer, {\n      headers: {\n        'Content-Type': document.mime,\n        'Content-Disposition': `attachment; filename=\"${document.filename}\"`,\n      },\n    })\n  } catch (error) {\n    console.error('Download error:', error)\n    return NextResponse.json(\n      { error: 'Failed to download file' },\n      { status: 500 }\n    )\n  }\n}","import { AppRouteRouteModule } from \"next/dist/esm/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/esm/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/esm/server/lib/patch-fetch\";\nimport { getRequestMeta } from \"next/dist/esm/server/request-meta\";\nimport { getTracer, SpanKind } from \"next/dist/esm/server/lib/trace/tracer\";\nimport { normalizeAppPath } from \"next/dist/esm/shared/lib/router/utils/app-paths\";\nimport { NodeNextRequest, NodeNextResponse } from \"next/dist/esm/server/base-http/node\";\nimport { NextRequestAdapter, signalFromNodeResponse } from \"next/dist/esm/server/web/spec-extension/adapters/next-request\";\nimport { BaseServerSpan } from \"next/dist/esm/server/lib/trace/constants\";\nimport { getRevalidateReason } from \"next/dist/esm/server/instrumentation/utils\";\nimport { sendResponse } from \"next/dist/esm/server/send-response\";\nimport { fromNodeOutgoingHttpHeaders, toNodeOutgoingHttpHeaders } from \"next/dist/esm/server/web/utils\";\nimport { getCacheControlHeader } from \"next/dist/esm/server/lib/cache-control\";\nimport { INFINITE_CACHE, NEXT_CACHE_TAGS_HEADER } from \"next/dist/esm/lib/constants\";\nimport { NoFallbackError } from \"next/dist/esm/shared/lib/no-fallback-error.external\";\nimport { CachedRouteKind } from \"next/dist/esm/server/response-cache\";\nimport * as userland from \"INNER_APP_ROUTE\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/upload/route\",\n        pathname: \"/api/upload\",\n        filename: \"route\",\n        bundlePath: \"\"\n    },\n    distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n    relativeProjectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n    resolvedPagePath: \"[project]/src/app/api/upload/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\nexport async function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/upload/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (process.env.TURBOPACK) {\n        srcPage = srcPage.replace(/\\/index$/, '') || '/';\n    } else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = process.env.__NEXT_MULTI_ZONE_DRAFT_MODE;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = normalizeAppPath(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = getTracer();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: getRequestMeta(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new NodeNextRequest(req);\n    const nodeNextRes = new NodeNextResponse(res);\n    const nextReq = NextRequestAdapter.fromNodeNextRequest(nodeNextReq, signalFromNodeResponse(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!getRequestMeta(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = toNodeOutgoingHttpHeaders(response.headers);\n                        if (cacheTags) {\n                            headers[NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await sendResponse(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: getRevalidateReason({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!getRequestMeta(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = fromNodeOutgoingHttpHeaders(cacheEntry.value.headers);\n            if (!(getRequestMeta(req, 'minimalMode') && isIsr)) {\n                headers.delete(NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', getCacheControlHeader(cacheEntry.cacheControl));\n            }\n            await sendResponse(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: getRevalidateReason({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await sendResponse(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n"],"names":[],"mappings":"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","ignoreList":[5]}