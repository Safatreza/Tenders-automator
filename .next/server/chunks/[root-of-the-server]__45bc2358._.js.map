{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///D:/Professional_Internship/Tender%20Automator/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: ['query'],\n  })\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6IAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///D:/Professional_Internship/Tender%20Automator/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from 'next-auth'\nimport { PrismaAdapter } from '@auth/prisma-adapter'\nimport EmailProvider from 'next-auth/providers/email'\nimport { prisma } from './prisma'\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    EmailProvider({\n      server: {\n        host: process.env.EMAIL_SERVER_HOST,\n        port: parseInt(process.env.EMAIL_SERVER_PORT || '587'),\n        auth: {\n          user: process.env.EMAIL_SERVER_USER,\n          pass: process.env.EMAIL_SERVER_PASSWORD,\n        },\n      },\n      from: process.env.EMAIL_FROM,\n    }),\n  ],\n  pages: {\n    signIn: '/auth/signin',\n    verifyRequest: '/auth/verify-request',\n    error: '/auth/error',\n  },\n  callbacks: {\n    async session({ session, user }) {\n      if (session.user) {\n        // Add user role to session\n        const dbUser = await prisma.user.findUnique({\n          where: { email: session.user.email! },\n          select: { id: true, role: true },\n        })\n\n        session.user.id = dbUser?.id || ''\n        session.user.role = dbUser?.role || 'ANALYST'\n      }\n      return session\n    },\n    async jwt({ token, user }) {\n      if (user) {\n        token.role = user.role\n      }\n      return token\n    },\n  },\n  session: {\n    strategy: 'database',\n  },\n}"],"names":[],"mappings":";;;;AACA;AACA;AACA;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS,IAAA,uKAAa,EAAC,gIAAM;IAC7B,WAAW;QACT,IAAA,+JAAa,EAAC;YACZ,QAAQ;gBACN,MAAM,QAAQ,GAAG,CAAC,iBAAiB;gBACnC,MAAM,SAAS,QAAQ,GAAG,CAAC,iBAAiB,IAAI;gBAChD,MAAM;oBACJ,MAAM,QAAQ,GAAG,CAAC,iBAAiB;oBACnC,MAAM,QAAQ,GAAG,CAAC,qBAAqB;gBACzC;YACF;YACA,MAAM,QAAQ,GAAG,CAAC,UAAU;QAC9B;KACD;IACD,OAAO;QACL,QAAQ;QACR,eAAe;QACf,OAAO;IACT;IACA,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,IAAI,EAAE;YAC7B,IAAI,QAAQ,IAAI,EAAE;gBAChB,2BAA2B;gBAC3B,MAAM,SAAS,MAAM,gIAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBAC1C,OAAO;wBAAE,OAAO,QAAQ,IAAI,CAAC,KAAK;oBAAE;oBACpC,QAAQ;wBAAE,IAAI;wBAAM,MAAM;oBAAK;gBACjC;gBAEA,QAAQ,IAAI,CAAC,EAAE,GAAG,QAAQ,MAAM;gBAChC,QAAQ,IAAI,CAAC,IAAI,GAAG,QAAQ,QAAQ;YACtC;YACA,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,IAAI,GAAG,KAAK,IAAI;YACxB;YACA,OAAO;QACT;IACF;IACA,SAAS;QACP,UAAU;IACZ;AACF","debugId":null}},
    {"offset": {"line": 195, "column": 0}, "map": {"version":3,"sources":["file:///D:/Professional_Internship/Tender%20Automator/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from 'next-auth'\nimport { authOptions } from '@/lib/auth'\n\nconst handler = NextAuth(authOptions)\n\nexport { handler as GET, handler as POST }"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,MAAM,UAAU,IAAA,kJAAQ,EAAC,mIAAW","debugId":null}}]
}