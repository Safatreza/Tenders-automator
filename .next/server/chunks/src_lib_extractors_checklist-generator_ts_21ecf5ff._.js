module.exports=[33109,e=>{"use strict";e.s(["ChecklistGenerator",()=>a,"checklistGenerator",()=>i]);var t=e.i(98043);class a{autoCheckRules=new Map;constructor(){this.initializeRules()}initializeRules(){this.autoCheckRules.set("tax-certificate",{key:"tax-certificate",name:"Tax Certificate",description:"Valid tax certificate or clearance required",autoCheck:{enabled:!0,field:"eligibility",condition:{operator:"contains",value:"tax",caseSensitive:!1}},required:!0}),this.autoCheckRules.set("iso-9001",{key:"iso-9001",name:"ISO 9001 Certification",description:"ISO 9001 quality management certification",autoCheck:{enabled:!0,field:"eligibility",condition:{operator:"contains",value:"iso",caseSensitive:!1}},required:!1}),this.autoCheckRules.set("financial-statements",{key:"financial-statements",name:"Financial Statements",description:"Audited financial statements for last 3 years",autoCheck:{enabled:!0,field:"eligibility",condition:{operator:"contains",value:"financial",caseSensitive:!1}},required:!0}),this.autoCheckRules.set("technical-specifications",{key:"technical-specifications",name:"Technical Specifications",description:"Detailed technical specifications and drawings",autoCheck:{enabled:!0,field:"submissionMechanics",condition:{operator:"contains",value:"technical",caseSensitive:!1}},required:!0}),this.autoCheckRules.set("legal-compliance",{key:"legal-compliance",name:"Legal Compliance",description:"Legal compliance and regulatory requirements",autoCheck:{enabled:!0,field:"eligibility",condition:{operator:"contains",value:"legal",caseSensitive:!1}},required:!0}),this.autoCheckRules.set("insurance-coverage",{key:"insurance-coverage",name:"Insurance Coverage",description:"Professional indemnity and public liability insurance",autoCheck:{enabled:!0,field:"eligibility",condition:{operator:"contains",value:"insurance",caseSensitive:!1}},required:!1}),this.autoCheckRules.set("company-registration",{key:"company-registration",name:"Company Registration",description:"Valid company registration certificate",autoCheck:{enabled:!0,field:"eligibility",condition:{operator:"contains",value:"registration",caseSensitive:!1}},required:!0}),this.autoCheckRules.set("deadline-compliance",{key:"deadline-compliance",name:"Deadline Compliance",description:"Submission before deadline",autoCheck:{enabled:!0,field:"deadlineSubmission",condition:{operator:"date_after",value:new Date}},required:!0})}async generateChecklist(e,a,i={}){try{let s=await t.prisma.template.findUnique({where:{id:a}});if(!s||"CHECKLIST"!==s.kind)throw Error("Checklist template not found");let n=await t.prisma.fieldExtraction.findMany({where:{tenderId:e},include:{traceLinks:{select:{id:!0}}}}),r=new Map(n.map(e=>[e.key,e])),c=s.schema,o=[],l=0,u=0;for(let e of c.categories)for(let t of e.items){let e;if(i.requiredItemsOnly&&!t.required)continue;let a=this.autoCheckRules.get(t.key),s="PENDING",n=[],c=!1;if(!1!==i.autoCheck&&a?.autoCheck.enabled){let t=await this.performAutoCheck(a,r);s=t.status,e=t.notes,n=t.traceLinkIds,(c=t.autoChecked)&&l++}"PENDING"===s&&u++,o.push({key:t.key,label:t.label,status:s,notes:e,traceLinkIds:n,autoChecked:c})}return await this.saveChecklistItems(e,o),{items:o,metadata:{templateId:a,generatedAt:new Date,totalItems:o.length,autoCheckedItems:l,requiresManualReview:u}}}catch(e){throw console.error("Error generating checklist:",e),e}}async performAutoCheck(e,t){try{if(!e.autoCheck.field||!e.autoCheck.condition)return{status:"PENDING",traceLinkIds:[],autoChecked:!1};let a=t.get(e.autoCheck.field);if(!a)return{status:"MISSING",notes:`Required field '${e.autoCheck.field}' not found`,traceLinkIds:[],autoChecked:!0};let i=e.autoCheck.condition,s=a.value,n=a.traceLinks.map(e=>e.id),r=!1;switch(i.operator){case"contains":if("string"==typeof s){let e=i.caseSensitive?i.value:i.value.toLowerCase();r=(i.caseSensitive?s:s.toLowerCase()).includes(e)}break;case"equals":r=s===i.value;break;case"exists":r=null!=s&&""!==s;break;case"matches":"string"==typeof s&&i.value&&(r=new RegExp(i.value,i.caseSensitive?"g":"gi").test(s));break;case"date_after":s instanceof Date&&i.value instanceof Date&&(r=s>i.value);break;case"date_before":s instanceof Date&&i.value instanceof Date&&(r=s<i.value)}return{status:r?"OK":e.required?"MISSING":"PENDING",notes:r?`Auto-checked: Found evidence in ${e.autoCheck.field}`:`Auto-checked: No evidence found in ${e.autoCheck.field}`,traceLinkIds:n,autoChecked:!0}}catch(e){return console.error("Error in auto-check:",e),{status:"PENDING",notes:"Auto-check failed, manual review required",traceLinkIds:[],autoChecked:!1}}}async saveChecklistItems(e,a){try{for(let i of a)await t.prisma.checklistItem.upsert({where:{tenderId_key:{tenderId:e,key:i.key}},create:{tenderId:e,key:i.key,label:i.label,status:i.status,notes:i.notes,traceLinks:{connect:i.traceLinkIds.map(e=>({id:e}))}},update:{status:i.status,notes:i.notes,traceLinks:{set:i.traceLinkIds.map(e=>({id:e}))}}})}catch(e){throw console.error("Error saving checklist items:",e),Error("Failed to save checklist items")}}async updateChecklistItem(e,a,i){try{await t.prisma.checklistItem.update({where:{tenderId_key:{tenderId:e,key:a}},data:{status:i.status,notes:i.notes,updatedAt:new Date}})}catch(e){throw console.error("Error updating checklist item:",e),Error("Failed to update checklist item")}}async getChecklist(e){try{return(await t.prisma.checklistItem.findMany({where:{tenderId:e},include:{traceLinks:{select:{id:!0,page:!0,snippet:!0,documentId:!0}}},orderBy:{key:"asc"}})).map(e=>({key:e.key,label:e.label,status:e.status,notes:e.notes||void 0,traceLinks:e.traceLinks,updatedAt:e.updatedAt}))}catch(e){throw console.error("Error getting checklist:",e),Error("Failed to get checklist")}}async validateChecklist(e){try{let a=await t.prisma.checklistItem.findMany({where:{tenderId:e}}),i={total:a.length,ok:0,missing:0,pending:0,notApplicable:0},s=[],n=[];a.forEach(e=>{switch(e.status){case"OK":i.ok++;break;case"MISSING":i.missing++,n.push(e.key);break;case"PENDING":i.pending++,s.push(e.key);break;case"N_A":i.notApplicable++}});let r=0===s.length&&0===n.length;return{isComplete:r,canApprove:r,pendingItems:s,missingItems:n,statistics:i}}catch(e){throw console.error("Error validating checklist:",e),Error("Failed to validate checklist")}}async bulkUpdateChecklist(e,a){try{await t.prisma.$transaction(a.map(a=>t.prisma.checklistItem.update({where:{tenderId_key:{tenderId:e,key:a.key}},data:{status:a.status,notes:a.notes,updatedAt:new Date}})))}catch(e){throw console.error("Error bulk updating checklist:",e),Error("Failed to bulk update checklist")}}}let i=new a}];

//# sourceMappingURL=src_lib_extractors_checklist-generator_ts_21ecf5ff._.js.map