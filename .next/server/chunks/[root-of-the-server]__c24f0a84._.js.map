{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":["file:///D:/Professional_Internship/Tender%20Automator/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: ['query'],\n  })\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6IAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///D:/Professional_Internship/Tender%20Automator/src/lib/auth.ts"],"sourcesContent":["// NextAuth Configuration for Tender Automator\n// Email magic link authentication with role-based access\n\nimport { NextAuthOptions } from 'next-auth'\nimport { PrismaAdapter } from '@auth/prisma-adapter'\nimport EmailProvider from 'next-auth/providers/email'\nimport { prisma } from './prisma'\n// import { sendMagicLinkEmail } from './email'\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    EmailProvider({\n      server: {\n        host: process.env.EMAIL_SERVER_HOST,\n        port: parseInt(process.env.EMAIL_SERVER_PORT || '587'),\n        auth: {\n          user: process.env.EMAIL_SERVER_USER,\n          pass: process.env.EMAIL_SERVER_PASSWORD,\n        },\n      },\n      from: process.env.EMAIL_FROM,\n      // Use default email sending for now - configure in production\n      // sendVerificationRequest: async ({ identifier, url, provider }) => {\n      //   try {\n      //     await sendMagicLinkEmail(identifier, url)\n      //   } catch (error) {\n      //     console.error('Failed to send verification email:', error)\n      //     throw new Error('Failed to send verification email')\n      //   }\n      // },\n    }),\n  ],\n  pages: {\n    signIn: '/auth/signin',\n    verifyRequest: '/auth/verify-request',\n    error: '/auth/error',\n  },\n  callbacks: {\n    async session({ session, user }) {\n      if (session.user && user) {\n        // Get user with role from database\n        const dbUser = await prisma.user.findUnique({\n          where: { id: user.id },\n          select: { id: true, role: true, name: true, email: true },\n        })\n\n        if (dbUser) {\n          session.user.id = dbUser.id\n          session.user.role = dbUser.role\n          session.user.name = dbUser.name\n          session.user.email = dbUser.email\n        }\n      }\n      return session\n    },\n    async jwt({ token, user }) {\n      if (user) {\n        const dbUser = await prisma.user.findUnique({\n          where: { id: user.id },\n          select: { role: true },\n        })\n        if (dbUser) {\n          token.role = dbUser.role\n        }\n      }\n      return token\n    },\n    async signIn({ user, account, profile, email, credentials }) {\n      // Allow sign in for all verified emails\n      return true\n    },\n  },\n  session: {\n    strategy: 'database',\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n    updateAge: 24 * 60 * 60, // 24 hours\n  },\n  events: {\n    async createUser({ user }) {\n      // Log user creation in audit trail\n      if (user.id) {\n        await prisma.auditLog.create({\n          data: {\n            actorId: user.id,\n            action: 'USER_CREATED',\n            entity: 'User',\n            entityId: user.id,\n            diff: {\n              before: null,\n              after: {\n                email: user.email,\n                role: 'ANALYST', // Default role\n              },\n            },\n          },\n        })\n      }\n    },\n    async signIn({ user, account, profile, isNewUser }) {\n      // Log sign in event\n      if (user.id) {\n        await prisma.auditLog.create({\n          data: {\n            actorId: user.id,\n            action: 'USER_SIGNIN',\n            entity: 'User',\n            entityId: user.id,\n            diff: {\n              timestamp: new Date().toISOString(),\n              isNewUser,\n              provider: account?.provider,\n            },\n          },\n        })\n      }\n    },\n  },\n  debug: process.env.NODE_ENV === 'development',\n}"],"names":[],"mappings":"AAAA,8CAA8C;AAC9C,yDAAyD;;;;;AAGzD;AACA;AACA;;;;AAGO,MAAM,cAA+B;IAC1C,SAAS,IAAA,uKAAa,EAAC,gIAAM;IAC7B,WAAW;QACT,IAAA,+JAAa,EAAC;YACZ,QAAQ;gBACN,MAAM,QAAQ,GAAG,CAAC,iBAAiB;gBACnC,MAAM,SAAS,QAAQ,GAAG,CAAC,iBAAiB,IAAI;gBAChD,MAAM;oBACJ,MAAM,QAAQ,GAAG,CAAC,iBAAiB;oBACnC,MAAM,QAAQ,GAAG,CAAC,qBAAqB;gBACzC;YACF;YACA,MAAM,QAAQ,GAAG,CAAC,UAAU;QAU9B;KACD;IACD,OAAO;QACL,QAAQ;QACR,eAAe;QACf,OAAO;IACT;IACA,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,IAAI,EAAE;YAC7B,IAAI,QAAQ,IAAI,IAAI,MAAM;gBACxB,mCAAmC;gBACnC,MAAM,SAAS,MAAM,gIAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBAC1C,OAAO;wBAAE,IAAI,KAAK,EAAE;oBAAC;oBACrB,QAAQ;wBAAE,IAAI;wBAAM,MAAM;wBAAM,MAAM;wBAAM,OAAO;oBAAK;gBAC1D;gBAEA,IAAI,QAAQ;oBACV,QAAQ,IAAI,CAAC,EAAE,GAAG,OAAO,EAAE;oBAC3B,QAAQ,IAAI,CAAC,IAAI,GAAG,OAAO,IAAI;oBAC/B,QAAQ,IAAI,CAAC,IAAI,GAAG,OAAO,IAAI;oBAC/B,QAAQ,IAAI,CAAC,KAAK,GAAG,OAAO,KAAK;gBACnC;YACF;YACA,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,SAAS,MAAM,gIAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBAC1C,OAAO;wBAAE,IAAI,KAAK,EAAE;oBAAC;oBACrB,QAAQ;wBAAE,MAAM;oBAAK;gBACvB;gBACA,IAAI,QAAQ;oBACV,MAAM,IAAI,GAAG,OAAO,IAAI;gBAC1B;YACF;YACA,OAAO;QACT;QACA,MAAM,QAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE;YACzD,wCAAwC;YACxC,OAAO;QACT;IACF;IACA,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;QACvB,WAAW,KAAK,KAAK;IACvB;IACA,QAAQ;QACN,MAAM,YAAW,EAAE,IAAI,EAAE;YACvB,mCAAmC;YACnC,IAAI,KAAK,EAAE,EAAE;gBACX,MAAM,gIAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;oBAC3B,MAAM;wBACJ,SAAS,KAAK,EAAE;wBAChB,QAAQ;wBACR,QAAQ;wBACR,UAAU,KAAK,EAAE;wBACjB,MAAM;4BACJ,QAAQ;4BACR,OAAO;gCACL,OAAO,KAAK,KAAK;gCACjB,MAAM;4BACR;wBACF;oBACF;gBACF;YACF;QACF;QACA,MAAM,QAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE;YAChD,oBAAoB;YACpB,IAAI,KAAK,EAAE,EAAE;gBACX,MAAM,gIAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;oBAC3B,MAAM;wBACJ,SAAS,KAAK,EAAE;wBAChB,QAAQ;wBACR,QAAQ;wBACR,UAAU,KAAK,EAAE;wBACjB,MAAM;4BACJ,WAAW,IAAI,OAAO,WAAW;4BACjC;4BACA,UAAU,SAAS;wBACrB;oBACF;gBACF;YACF;QACF;IACF;IACA,OAAO,oDAAyB;AAClC","debugId":null}},
    {"offset": {"line": 308, "column": 0}, "map": {"version":3,"sources":["file:///D:/Professional_Internship/Tender%20Automator/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["// NextAuth API Route Handler\n\nimport NextAuth from 'next-auth'\nimport { authOptions } from '@/lib/auth'\n\nconst handler = NextAuth(authOptions)\n\nexport { handler as GET, handler as POST }"],"names":[],"mappings":"AAAA,6BAA6B;;;;;;;AAE7B;AACA;;;AAEA,MAAM,UAAU,IAAA,kJAAQ,EAAC,mIAAW","debugId":null}}]
}