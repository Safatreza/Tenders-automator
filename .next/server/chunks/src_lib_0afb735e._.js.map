{"version":3,"sources":["turbopack:///[project]/src/lib/pipeline/executor.ts"],"sourcesContent":["import { prisma } from '@/lib/prisma'\nimport { PipelineConfig, RunLogEntry } from '@/types/pipeline'\n\nexport interface StepContext {\n  runId: string\n  tenderId: string\n  parameters: Record<string, any>\n  stepResults: Record<string, any>\n  documents: Array<{ id: string; filename: string; url: string }>\n}\n\nexport interface StepResult {\n  success: boolean\n  data?: any\n  error?: string\n  logs: RunLogEntry[]\n  metadata?: Record<string, any>\n}\n\nexport class PipelineExecutor {\n  private stepRegistry: Map<string, (context: StepContext, params: any) => Promise<StepResult>> = new Map()\n\n  constructor() {\n    this.registerSteps()\n  }\n\n  private registerSteps() {\n    // Register built-in steps\n    this.stepRegistry.set('pipeline/prepare', this.prepareStep.bind(this))\n    this.stepRegistry.set('pipeline/extract', this.extractStep.bind(this))\n    this.stepRegistry.set('pipeline/checklist', this.checklistStep.bind(this))\n    this.stepRegistry.set('pipeline/summary', this.summaryStep.bind(this))\n    this.stepRegistry.set('pipeline/human-approval', this.humanApprovalStep.bind(this))\n    this.stepRegistry.set('pipeline/notify', this.notifyStep.bind(this))\n  }\n\n  async execute(\n    runId: string,\n    tenderId: string,\n    config: PipelineConfig,\n    parameters: Record<string, any> = {}\n  ): Promise<any> {\n    const context: StepContext = {\n      runId,\n      tenderId,\n      parameters,\n      stepResults: {},\n      documents: await this.getDocuments(tenderId),\n    }\n\n    const logs: RunLogEntry[] = []\n    let overallResult: any = {}\n\n    try {\n      await this.logStep(runId, 'info', `Starting pipeline: ${config.name}`)\n\n      for (const step of config.steps) {\n        await this.logStep(runId, 'info', `Executing step: ${step.id}`, { step: step.id })\n\n        try {\n          const stepHandler = this.stepRegistry.get(step.uses)\n          if (!stepHandler) {\n            throw new Error(`Unknown step type: ${step.uses}`)\n          }\n\n          const result = await stepHandler(context, step.with || {})\n\n          if (result.success) {\n            context.stepResults[step.id] = result.data\n            overallResult[step.id] = result.data\n\n            await this.logStep(runId, 'info', `Step completed: ${step.id}`, {\n              step: step.id,\n              result: result.data,\n            })\n\n            // Log step-specific logs\n            for (const log of result.logs) {\n              await this.logStep(runId, log.level, log.message, log.data)\n            }\n          } else {\n            const errorMsg = `Step failed: ${step.id} - ${result.error}`\n            await this.logStep(runId, 'error', errorMsg, { step: step.id, error: result.error })\n\n            if (!step.continueOnError) {\n              throw new Error(errorMsg)\n            }\n          }\n        } catch (error) {\n          const errorMsg = `Step execution error: ${step.id} - ${error.message}`\n          await this.logStep(runId, 'error', errorMsg, { step: step.id, error: error.message })\n\n          if (!step.continueOnError) {\n            throw error\n          }\n        }\n      }\n\n      await this.logStep(runId, 'info', `Pipeline completed: ${config.name}`)\n\n      return overallResult\n    } catch (error) {\n      await this.logStep(runId, 'error', `Pipeline failed: ${config.name} - ${error.message}`)\n      throw error\n    }\n  }\n\n  private async getDocuments(tenderId: string) {\n    return await prisma.document.findMany({\n      where: { tenderId },\n      select: { id: true, filename: true, url: true },\n    })\n  }\n\n  private async logStep(\n    runId: string,\n    level: 'info' | 'warn' | 'error' | 'debug',\n    message: string,\n    data?: any\n  ) {\n    await prisma.run.update({\n      where: { id: runId },\n      data: {\n        logs: {\n          push: {\n            timestamp: new Date(),\n            level,\n            message,\n            data,\n          },\n        },\n      },\n    })\n  }\n\n  // Step implementations\n  private async prepareStep(context: StepContext, params: any): Promise<StepResult> {\n    const logs: RunLogEntry[] = []\n\n    try {\n      // Parse documents if not already done\n      const { documentParser } = await import('@/lib/parsing/document-parser')\n\n      for (const doc of context.documents) {\n        // Check if document already has trace links\n        const existingLinks = await prisma.traceLink.count({\n          where: { documentId: doc.id },\n        })\n\n        if (existingLinks === 0) {\n          logs.push({\n            timestamp: new Date(),\n            level: 'info',\n            message: `Parsing document: ${doc.filename}`,\n          })\n\n          // This would require downloading the document and parsing it\n          // For now, we'll simulate the parsing\n          logs.push({\n            timestamp: new Date(),\n            level: 'info',\n            message: `Document parsed: ${doc.filename}`,\n          })\n        }\n      }\n\n      return {\n        success: true,\n        data: { documentsProcessed: context.documents.length },\n        logs,\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        logs: [\n          ...logs,\n          {\n            timestamp: new Date(),\n            level: 'error',\n            message: `Prepare step failed: ${error.message}`,\n          },\n        ],\n      }\n    }\n  }\n\n  private async extractStep(context: StepContext, params: any): Promise<StepResult> {\n    const logs: RunLogEntry[] = []\n\n    try {\n      const { fieldExtractor } = await import('@/lib/extractors/field-extractor')\n\n      const fields = params.fields || [\n        { key: 'scope', requireCitations: true },\n        { key: 'eligibility', requireCitations: true },\n        { key: 'evaluationCriteria', requireCitations: true },\n        { key: 'submissionMechanics', requireCitations: true },\n        { key: 'deadlineSubmission', requireCitations: true },\n      ]\n\n      const extractedFields: any = {}\n\n      for (const field of fields) {\n        logs.push({\n          timestamp: new Date(),\n          level: 'info',\n          message: `Extracting field: ${field.key}`,\n        })\n\n        try {\n          const result = await fieldExtractor.extractField(\n            context.tenderId,\n            field.key,\n            field\n          )\n\n          if (result.citations.length === 0 && field.requireCitations) {\n            throw new Error(`No citations found for required field: ${field.key}`)\n          }\n\n          extractedFields[field.key] = result\n\n          logs.push({\n            timestamp: new Date(),\n            level: 'info',\n            message: `Field extracted: ${field.key}`,\n            data: { confidence: result.confidence, citations: result.citations.length },\n          })\n        } catch (error) {\n          logs.push({\n            timestamp: new Date(),\n            level: 'error',\n            message: `Failed to extract field: ${field.key} - ${error.message}`,\n          })\n          throw error\n        }\n      }\n\n      return {\n        success: true,\n        data: extractedFields,\n        logs,\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        logs: [\n          ...logs,\n          {\n            timestamp: new Date(),\n            level: 'error',\n            message: `Extract step failed: ${error.message}`,\n          },\n        ],\n      }\n    }\n  }\n\n  private async checklistStep(context: StepContext, params: any): Promise<StepResult> {\n    const logs: RunLogEntry[] = []\n\n    try {\n      const { checklistGenerator } = await import('@/lib/extractors/checklist-generator')\n\n      const templateId = params.templateId\n      if (!templateId) {\n        throw new Error('Template ID is required for checklist step')\n      }\n\n      logs.push({\n        timestamp: new Date(),\n        level: 'info',\n        message: `Generating checklist with template: ${templateId}`,\n      })\n\n      const checklist = await checklistGenerator.generateChecklist(\n        context.tenderId,\n        templateId,\n        params\n      )\n\n      logs.push({\n        timestamp: new Date(),\n        level: 'info',\n        message: `Checklist generated with ${checklist.items.length} items`,\n      })\n\n      return {\n        success: true,\n        data: checklist,\n        logs,\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        logs: [\n          ...logs,\n          {\n            timestamp: new Date(),\n            level: 'error',\n            message: `Checklist step failed: ${error.message}`,\n          },\n        ],\n      }\n    }\n  }\n\n  private async summaryStep(context: StepContext, params: any): Promise<StepResult> {\n    const logs: RunLogEntry[] = []\n\n    try {\n      const { summaryGenerator } = await import('@/lib/extractors/summary-generator')\n\n      const templateId = params.templateId\n      if (!templateId) {\n        throw new Error('Template ID is required for summary step')\n      }\n\n      logs.push({\n        timestamp: new Date(),\n        level: 'info',\n        message: `Generating summary with template: ${templateId}`,\n      })\n\n      const summary = await summaryGenerator.generateSummary(\n        context.tenderId,\n        templateId,\n        params\n      )\n\n      logs.push({\n        timestamp: new Date(),\n        level: 'info',\n        message: `Summary generated with ${summary.blocks.length} sections`,\n      })\n\n      return {\n        success: true,\n        data: summary,\n        logs,\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        logs: [\n          ...logs,\n          {\n            timestamp: new Date(),\n            level: 'error',\n            message: `Summary step failed: ${error.message}`,\n          },\n        ],\n      }\n    }\n  }\n\n  private async humanApprovalStep(context: StepContext, params: any): Promise<StepResult> {\n    const logs: RunLogEntry[] = []\n\n    try {\n      // Update tender status to ready for review\n      await prisma.tender.update({\n        where: { id: context.tenderId },\n        data: { status: 'READY_FOR_REVIEW' },\n      })\n\n      logs.push({\n        timestamp: new Date(),\n        level: 'info',\n        message: 'Tender marked as ready for review',\n      })\n\n      return {\n        success: true,\n        data: { status: 'PENDING_APPROVAL', rolesAllowed: params.rolesAllowed },\n        logs,\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        logs: [\n          ...logs,\n          {\n            timestamp: new Date(),\n            level: 'error',\n            message: `Human approval step failed: ${error.message}`,\n          },\n        ],\n      }\n    }\n  }\n\n  private async notifyStep(context: StepContext, params: any): Promise<StepResult> {\n    const logs: RunLogEntry[] = []\n\n    try {\n      // This would integrate with email/notification service\n      logs.push({\n        timestamp: new Date(),\n        level: 'info',\n        message: 'Notifications sent',\n        data: { recipients: params.recipients || [] },\n      })\n\n      return {\n        success: true,\n        data: { notificationsSent: true },\n        logs,\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        logs: [\n          ...logs,\n          {\n            timestamp: new Date(),\n            level: 'error',\n            message: `Notify step failed: ${error.message}`,\n          },\n        ],\n      }\n    }\n  }\n}\n\nexport const pipelineExecutor = new PipelineExecutor()"],"names":[],"mappings":"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"}