module.exports=[8665,e=>{"use strict";e.s(["PipelineExecutor",()=>s,"pipelineExecutor",()=>r]);var t=e.i(98043);class s{stepRegistry=new Map;constructor(){this.registerSteps()}registerSteps(){this.stepRegistry.set("pipeline/prepare",this.prepareStep.bind(this)),this.stepRegistry.set("pipeline/extract",this.extractStep.bind(this)),this.stepRegistry.set("pipeline/checklist",this.checklistStep.bind(this)),this.stepRegistry.set("pipeline/summary",this.summaryStep.bind(this)),this.stepRegistry.set("pipeline/human-approval",this.humanApprovalStep.bind(this)),this.stepRegistry.set("pipeline/notify",this.notifyStep.bind(this))}async execute(e,t,s,r={}){let a={runId:e,tenderId:t,parameters:r,stepResults:{},documents:await this.getDocuments(t)},i={};try{for(let t of(await this.logStep(e,"info",`Starting pipeline: ${s.name}`),s.steps)){await this.logStep(e,"info",`Executing step: ${t.id}`,{step:t.id});try{let s=this.stepRegistry.get(t.uses);if(!s)throw Error(`Unknown step type: ${t.uses}`);let r=await s(a,t.with||{});if(r.success)for(let s of(a.stepResults[t.id]=r.data,i[t.id]=r.data,await this.logStep(e,"info",`Step completed: ${t.id}`,{step:t.id,result:r.data}),r.logs))await this.logStep(e,s.level,s.message,s.data);else{let s=`Step failed: ${t.id} - ${r.error}`;if(await this.logStep(e,"error",s,{step:t.id,error:r.error}),!t.continueOnError)throw Error(s)}}catch(r){let s=`Step execution error: ${t.id} - ${r.message}`;if(await this.logStep(e,"error",s,{step:t.id,error:r.message}),!t.continueOnError)throw r}}return await this.logStep(e,"info",`Pipeline completed: ${s.name}`),i}catch(t){throw await this.logStep(e,"error",`Pipeline failed: ${s.name} - ${t.message}`),t}}async getDocuments(e){return await t.prisma.document.findMany({where:{tenderId:e},select:{id:!0,filename:!0,url:!0}})}async logStep(e,s,r,a){await t.prisma.run.update({where:{id:e},data:{logs:{push:{timestamp:new Date,level:s,message:r,data:a}}}})}async prepareStep(s,r){let a=[];try{let{documentParser:r}=await e.A(3653);for(let e of s.documents){let s=await t.prisma.traceLink.count({where:{documentId:e.id}});0===s&&(a.push({timestamp:new Date,level:"info",message:`Parsing document: ${e.filename}`}),a.push({timestamp:new Date,level:"info",message:`Document parsed: ${e.filename}`}))}return{success:!0,data:{documentsProcessed:s.documents.length},logs:a}}catch(e){return{success:!1,error:e.message,logs:[...a,{timestamp:new Date,level:"error",message:`Prepare step failed: ${e.message}`}]}}}async extractStep(t,s){let r=[];try{let{fieldExtractor:a}=await e.A(1400),i=s.fields||[{key:"scope",requireCitations:!0},{key:"eligibility",requireCitations:!0},{key:"evaluationCriteria",requireCitations:!0},{key:"submissionMechanics",requireCitations:!0},{key:"deadlineSubmission",requireCitations:!0}],n={};for(let e of i){r.push({timestamp:new Date,level:"info",message:`Extracting field: ${e.key}`});try{let s=await a.extractField(t.tenderId,e.key,e);if(0===s.citations.length&&e.requireCitations)throw Error(`No citations found for required field: ${e.key}`);n[e.key]=s,r.push({timestamp:new Date,level:"info",message:`Field extracted: ${e.key}`,data:{confidence:s.confidence,citations:s.citations.length}})}catch(t){throw r.push({timestamp:new Date,level:"error",message:`Failed to extract field: ${e.key} - ${t.message}`}),t}}return{success:!0,data:n,logs:r}}catch(e){return{success:!1,error:e.message,logs:[...r,{timestamp:new Date,level:"error",message:`Extract step failed: ${e.message}`}]}}}async checklistStep(t,s){let r=[];try{let{checklistGenerator:a}=await e.A(67911),i=s.templateId;if(!i)throw Error("Template ID is required for checklist step");r.push({timestamp:new Date,level:"info",message:`Generating checklist with template: ${i}`});let n=await a.generateChecklist(t.tenderId,i,s);return r.push({timestamp:new Date,level:"info",message:`Checklist generated with ${n.items.length} items`}),{success:!0,data:n,logs:r}}catch(e){return{success:!1,error:e.message,logs:[...r,{timestamp:new Date,level:"error",message:`Checklist step failed: ${e.message}`}]}}}async summaryStep(t,s){let r=[];try{let{summaryGenerator:a}=await e.A(68189),i=s.templateId;if(!i)throw Error("Template ID is required for summary step");r.push({timestamp:new Date,level:"info",message:`Generating summary with template: ${i}`});let n=await a.generateSummary(t.tenderId,i,s);return r.push({timestamp:new Date,level:"info",message:`Summary generated with ${n.blocks.length} sections`}),{success:!0,data:n,logs:r}}catch(e){return{success:!1,error:e.message,logs:[...r,{timestamp:new Date,level:"error",message:`Summary step failed: ${e.message}`}]}}}async humanApprovalStep(e,s){let r=[];try{return await t.prisma.tender.update({where:{id:e.tenderId},data:{status:"READY_FOR_REVIEW"}}),r.push({timestamp:new Date,level:"info",message:"Tender marked as ready for review"}),{success:!0,data:{status:"PENDING_APPROVAL",rolesAllowed:s.rolesAllowed},logs:r}}catch(e){return{success:!1,error:e.message,logs:[...r,{timestamp:new Date,level:"error",message:`Human approval step failed: ${e.message}`}]}}}async notifyStep(e,t){let s=[];try{return s.push({timestamp:new Date,level:"info",message:"Notifications sent",data:{recipients:t.recipients||[]}}),{success:!0,data:{notificationsSent:!0},logs:s}}catch(e){return{success:!1,error:e.message,logs:[...s,{timestamp:new Date,level:"error",message:`Notify step failed: ${e.message}`}]}}}}let r=new s},3653,e=>{e.v(t=>Promise.all(["server/chunks/_a8e8cbf2._.js"].map(t=>e.l(t))).then(()=>t(13822)))},1400,e=>{e.v(t=>Promise.all(["server/chunks/src_lib_extractors_field-extractor_ts_292f65bb._.js"].map(t=>e.l(t))).then(()=>t(96903)))},67911,e=>{e.v(t=>Promise.all(["server/chunks/src_lib_extractors_checklist-generator_ts_21ecf5ff._.js"].map(t=>e.l(t))).then(()=>t(33109)))},68189,e=>{e.v(t=>Promise.all(["server/chunks/_e41e7175._.js"].map(t=>e.l(t))).then(()=>t(48519)))}];

//# sourceMappingURL=src_lib_0afb735e._.js.map