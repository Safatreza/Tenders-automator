module.exports=[96903,e=>{"use strict";e.s(["FieldExtractor",()=>i,"fieldExtractor",()=>r]);var t=e.i(98043);class i{patterns=new Map;constructor(){this.initializePatterns()}initializePatterns(){this.patterns.set("scope",[{name:"project_scope",pattern:/(?:project\s+)?scope[:\s]*([^.]{20,200})/gi,valueExtractor:e=>e[1].trim(),confidenceCalculator:(e,t)=>["objective","goal","purpose","aim","scope"].some(e=>t.toLowerCase().includes(e))?.8:.6},{name:"objectives",pattern:/(?:objectives?|goals?|aims?)[:\s]*([^.]{20,300})/gi,valueExtractor:e=>e[1].trim(),confidenceCalculator:()=>.9}]),this.patterns.set("eligibility",[{name:"eligibility_criteria",pattern:/(?:eligibility|eligible|qualification)[:\s]*([^.]{20,400})/gi,valueExtractor:e=>e[1].trim(),confidenceCalculator:()=>.9},{name:"requirements",pattern:/(?:requirements?|criteria)[:\s]*([^.]{20,300})/gi,valueExtractor:e=>e[1].trim(),confidenceCalculator:()=>.7}]),this.patterns.set("evaluationCriteria",[{name:"evaluation_criteria",pattern:/(?:evaluation\s+criteria|assessment\s+criteria)[:\s]*([^.]{20,500})/gi,valueExtractor:e=>e[1].trim(),confidenceCalculator:()=>.95},{name:"scoring_criteria",pattern:/(?:scoring|points?|marks?)[:\s]*([^.]{20,300})/gi,valueExtractor:e=>e[1].trim(),confidenceCalculator:()=>.8}]),this.patterns.set("submissionMechanics",[{name:"submission_process",pattern:/(?:submission|submit|how\s+to\s+apply)[:\s]*([^.]{20,400})/gi,valueExtractor:e=>e[1].trim(),confidenceCalculator:()=>.9},{name:"application_process",pattern:/(?:application\s+process|submission\s+method)[:\s]*([^.]{20,300})/gi,valueExtractor:e=>e[1].trim(),confidenceCalculator:()=>.85}]),this.patterns.set("deadlineSubmission",[{name:"deadline_date",pattern:/(?:deadline|due\s+date|closing\s+date)[:\s]*([^.]{5,100})/gi,valueExtractor:e=>this.extractDate(e[1]),confidenceCalculator:e=>this.extractDate(e[1])?.9:.4},{name:"submission_deadline",pattern:/(?:submit\s+by|submissions?\s+must\s+be\s+received)[:\s]*([^.]{5,100})/gi,valueExtractor:e=>this.extractDate(e[1]),confidenceCalculator:e=>this.extractDate(e[1])?.85:.3}])}async extractField(e,i,r={}){try{let a=this.patterns.get(i);if(!a)throw Error(`No extraction patterns found for field: ${i}`);let n=await t.prisma.traceLink.findMany({where:{document:{tenderId:e}},include:{document:{select:{id:!0,filename:!0}}}});if(0===n.length)throw Error("No trace links found for tender documents");let c=[];for(let e of n)for(let t of a)for(let a of Array.from(e.snippet.matchAll(t.pattern))){let n=t.valueExtractor(a,e.snippet);if(!n)continue;let o=t.confidenceCalculator?t.confidenceCalculator(a,e.snippet):.5;if(o<(r.minConfidence||.5))continue;let s=this.calculateRelevanceScore(i,n,e.snippet);c.push({value:n,confidence:o,traceLinkId:e.id,documentId:e.document.id,page:e.page,snippet:a[0],relevanceScore:s})}if(0===c.length){if(r.requireCitations)throw Error(`No valid extractions found for field: ${i}`);return{value:null,confidence:0,citations:[]}}c.sort((e,t)=>{let i=(e.confidence+e.relevanceScore)/2;return(t.confidence+t.relevanceScore)/2-i});let o=c[0],s=r.maxResults||5,l=c.slice(0,s).map(e=>({traceLinkId:e.traceLinkId,documentId:e.documentId,page:e.page,snippet:e.snippet,relevanceScore:e.relevanceScore}));return await this.saveExtraction(e,i,{value:o.value,confidence:o.confidence,citations:l}),{value:o.value,confidence:o.confidence,citations:l,metadata:{totalExtractions:c.length,pattern:"regex-based",fieldKey:i}}}catch(e){throw console.error(`Error extracting field ${i}:`,e),e}}calculateRelevanceScore(e,t,i){let r=i.toLowerCase(),a={scope:["scope","objective","goal","purpose","project","work"],eligibility:["eligible","qualification","requirement","criteria","must"],evaluationCriteria:["evaluation","assess","score","criteria","weight"],submissionMechanics:["submit","application","process","method","how"],deadlineSubmission:["deadline","due","closing","submit by","before"]}[e]||[],n=a.filter(e=>r.includes(e)).length/a.length;return"string"==typeof t&&(t.length>50&&(n+=.1),(t.includes("shall")||t.includes("must"))&&(n+=.1)),"deadlineSubmission"===e&&t instanceof Date&&(n+=.2),Math.min(n,1)}extractDate(e){try{for(let t of[/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/,/(\d{4})[\/\-](\d{1,2})[\/\-](\d{1,2})/,/(\d{1,2})\s+(January|February|March|April|May|June|July|August|September|October|November|December)\s+(\d{4})/i,/(January|February|March|April|May|June|July|August|September|October|November|December)\s+(\d{1,2}),?\s+(\d{4})/i])if(e.match(t)){let t=new Date(e);if(!isNaN(t.getTime()))return t}let t=new Date(e.trim());if(!isNaN(t.getTime()))return t;return null}catch{return null}}async saveExtraction(e,i,r){try{await t.prisma.fieldExtraction.upsert({where:{tenderId_key:{tenderId:e,key:i}},create:{tenderId:e,key:i,value:r.value,confidence:r.confidence,traceLinks:{connect:r.citations.map(e=>({id:e.traceLinkId}))}},update:{value:r.value,confidence:r.confidence,traceLinks:{set:r.citations.map(e=>({id:e.traceLinkId}))}}})}catch(e){throw console.error("Error saving extraction:",e),Error("Failed to save field extraction")}}async validateExtractions(e){try{let i=await t.prisma.fieldExtraction.findMany({where:{tenderId:e},include:{traceLinks:!0}}),r=new Set(i.map(e=>e.key)),a=["scope","eligibility","evaluationCriteria","submissionMechanics","deadlineSubmission"].filter(e=>!r.has(e)),n=i.filter(e=>e.confidence<.5).map(e=>e.key),c=i.filter(e=>0===e.traceLinks.length).map(e=>e.key);return{isValid:0===a.length&&0===n.length&&0===c.length,missingFields:a,lowConfidenceFields:n,fieldsWithoutCitations:c}}catch(e){throw console.error("Error validating extractions:",e),Error("Failed to validate extractions")}}}let r=new i}];

//# sourceMappingURL=src_lib_extractors_field-extractor_ts_292f65bb._.js.map